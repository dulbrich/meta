inorder_indices = empty_hashmap() # inorder idx -> inorder value

get_subtree(start_pre: int, end_pre: int, start_ino: int, end_ino: int):
	if start_pre > end_pre:
		return null
	
	cur_root_val = preorder[start_pre]
	cur_root_inorder_idx = inorder_indices[cur_root_val]	
	cur_root = TreeNode(cur_root_val)        
	
	left_size = cur_root_inorder_idx - start_ino
	cur_root.left = get_subtree(start_pre + 1, start_pre + left_size, start_ino, cur_root_inorder_idx - 1)
	
	right_size = end_ino - cur_root_inorder_idx
	cur_root.right = get_subtree(start_pre + left_size + 1, end_pre, cur_root_inorder_idx + 1, end_ino)
				
	return cur_root
            
build_tree(preorder: List[int], inorder: List[int]):	
	for i = 0 to len(inorder) - 1:
		inorder_indices[inorder[i]] = i	
		
	return get_subtree(0, len(preorder) - 1, 0 , len(inorder) - 1)

	
	